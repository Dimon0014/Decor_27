# coding=utf-8
def decorator_maker():
    print "001_Start_Я создаю декораторЫ! Я буду вызван только раз: " + \
          "когда ты попросишь меня создать тебе декоратор."

    def my_decorator(func):
        print "002_Start_Я - декоратор! Я буду вызван только раз: В МОМЕНТ ДЕКОРИРОВАНИЯ функции."

        def wrapped():
            print ("003_Я - обёртка вокруг декорируемой функции. "
                   "Я буду вызвана каждый раз когда ты вызываешь декорируемую функцию. "
                   "Я возвращаю результат работы декорируемой функции.")
            return func()

        print "002_End_Я возвращаю обёрнутую функцию."

        return wrapped

    print "001_End_Я возвращаю декоратор."
    return my_decorator

def decorated_function():
    print "004_Я - декорируемая функция."


decorated_function = decorator_maker()(decorated_function) # передача параметра следующей
                                                      #возращаемой функции и  ее вызов
                                                     # следущие (за основными) скобки
                                                   # как раз вызывают возращаемую функцию
# выведет:
# Я создаю декораторы! Я буду вызван только раз: когда ты попросишь меня создать тебе декоратор.
# Я возвращаю декоратор.
# Я - декоратор! Я буду вызван только раз: в момент декорирования функции.
# Я возвращаю обёрнутую функцию.
print ""
# Наконец:
decorated_function()
decorated_function()
# выведет:
# Я - обёртка вокруг декорируемой функции. Я буду вызвана каждый раз когда ты вызываешь декорируемую функцию.
# Я возвращаю результат работы декорируемой функции.
# Я - декорируемая функция.
